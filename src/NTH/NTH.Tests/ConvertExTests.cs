using NUnit.Framework;

namespace NTH.Tests
{
    [TestFixture]
    public class BitConverterExTests
    {
        [Test]
        public void FromHexString1()
        {
            const string someString = "4973556e697848696464656e46696c654e616d650047657446696c654e616d650066696c654e616d65006765745f46756c6c4e616d650046726f6d556e6978546f5574634461746554696d650046726f6d556e6978546f4c6f63616c54696d6500546f556e6976657273616c54696d6500546f556e697854696d6500756e697854696d650043726561746543757272656e74436f6d6d616e644c696e6500636f6d6d616e644c696e650057726974654c696e65006765745f4e65774c696e65005772697465436f6c6f724e65774c696e650049734e65774c696e65006e65774e65774c696e65006c696e65004e6f6e65006765745f54797065007365745f5479706500474348616e646c65547970650056616c75655479706500476574417474";
            byte[] expected =
            {
                0x49, 0x73, 0x55, 0x6e, 0x69, 0x78, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65,
                0x4e, 0x61, 0x6d, 0x65, 0x00, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
                0x00, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x00, 0x67, 0x65, 0x74, 0x5f, 0x46, 0x75,
                0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x00, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x78, 0x54,
                0x6f, 0x55, 0x74, 0x63, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x00, 0x46, 0x72, 0x6f,
                0x6d, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
                0x00, 0x54, 0x6f, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65,
                0x00, 0x54, 0x6f, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x00, 0x75, 0x6e, 0x69, 0x78,
                0x54, 0x69, 0x6d, 0x65, 0x00, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
                0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x00, 0x63, 0x6f,
                0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x00, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c,
                0x69, 0x6e, 0x65, 0x00, 0x67, 0x65, 0x74, 0x5f, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x00,
                0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e,
                0x65, 0x00, 0x49, 0x73, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x00, 0x6e, 0x65, 0x77, 0x4e,
                0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x00, 0x6c, 0x69, 0x6e, 0x65, 0x00, 0x4e, 0x6f, 0x6e, 0x65,
                0x00, 0x67, 0x65, 0x74, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x00, 0x73, 0x65, 0x74, 0x5f, 0x54, 0x79,
                0x70, 0x65, 0x00, 0x47, 0x43, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x00,
                0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x00, 0x47, 0x65, 0x74, 0x41, 0x74, 0x74
            };

            var actual = BitConverterEx.FromHexString(someString);

            Assert.That(actual, Is.Not.Null);
            Assert.That(actual, Is.Not.Empty);
            Assert.That(actual.Length, Is.EqualTo(someString.Length / 2));
            Assert.That(actual, Is.EqualTo(expected));
        }

        [Test]
        public void FromHexString2()
        {
            var actual = BitConverterEx.FromHexString(null);
            Assert.That(actual, Is.Null);
        }

        [Test]
        public void FromHexString3()
        {
            var actual = BitConverterEx.FromHexString("");
            Assert.That(actual, Is.Not.Null);
            Assert.That(actual.Length, Is.EqualTo(0));
        }

        [Test]
        public void FromHexString4()
        {
            var actual = BitConverterEx.FromHexString("AB");
            Assert.That(actual, Is.Not.Null);
            Assert.That(actual.Length, Is.EqualTo(1));
            Assert.That(actual[0], Is.EqualTo(0xAB));
        }

        [Test]
        public void ToHexStringSingle()
        {
            var actual = BitConverterEx.ToHexString(new byte[] { 0xAB });
            const string expected = "AB";
            Assert.That(actual, Is.Not.Null);
            Assert.That(actual.Length, Is.EqualTo(expected.Length));
            Assert.That(actual, Is.EqualTo(expected));
        }
        [Test]
        public void ToHexStringNull()
        {
            var actual = BitConverterEx.ToHexString(null);
            Assert.That(actual, Is.Null);
        }

        [Test]
        public void ToHexString1()
        {
            var actual = BitConverterEx.ToHexString(new byte[] { 0xAB, 0xCD });
            const string expected = "ABCD";
            Assert.That(actual, Is.Not.Null);
            Assert.That(actual.Length, Is.EqualTo(expected.Length));
            Assert.That(actual, Is.EqualTo(expected));
        }
    }
}
